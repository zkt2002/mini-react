(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

	// 内部数据共享层
	// react没法做到一个函数能判断是处于什么上下文
	// 因此选择在不同的上下文使用不同的函数，此时需要一个内部数据共享层来共享他们的数据
	const currentDispatcher = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispathcer = currentDispatcher.current;
	    if (dispathcer === null) {
	        throw new Error('hooks 只能在函数组件中执行');
	    }
	    return dispathcer;
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ReactElementType = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type: type,
	        key,
	        ref,
	        props,
	        __mark: 'kt'
	    };
	    return element;
	};
	function hasValidKey(config) {
	    return config.key !== undefined;
	}
	function hasValidRef(config) {
	    return config.ref !== undefined;
	}
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (hasValidKey(config)) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref' && val !== undefined) {
	            if (hasValidRef(config)) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        // 将多余参数作为children
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElementType(type, key, ref, props);
	};
	function isValidElement$1(object) {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	}

	// React
	const useState = (initialState) => {
	    const dispathcer = resolveDispatcher();
	    return dispathcer.useState(initialState);
	};
	// 内部数据共享层
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher
	};
	const version = '0.0.0';
	// 根据环境区分使用jsx/jsxDEV
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useState = useState;
	exports.version = version;

}));
