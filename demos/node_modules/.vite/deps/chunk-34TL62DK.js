// packages/shared/ReactSymbols.ts
var supportSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = supportSymbol ? Symbol.for("react.element") : 60103;

// packages/react/src/jsx.ts
var ReactElementType = function(type, key, ref, props) {
  const element = {
    $$typeof: REACT_ELEMENT_TYPE,
    type,
    key,
    ref,
    props,
    __mark: "kt"
  };
  return element;
};
function hasValidKey(config) {
  return config.key !== void 0;
}
function hasValidRef(config) {
  return config.ref !== void 0;
}
var jsxDEV = (type, config) => {
  let key = null;
  const props = {};
  let ref = null;
  for (const prop in config) {
    const val = config[prop];
    if (prop === "key") {
      if (hasValidKey(config)) {
        key = "" + val;
      }
      continue;
    }
    if (prop === "ref" && val !== void 0) {
      if (hasValidRef(config)) {
        ref = val;
      }
      continue;
    }
    if ({}.hasOwnProperty.call(config, prop)) {
      props[prop] = val;
    }
  }
  return ReactElementType(type, key, ref, props);
};

export {
  jsxDEV
};
//# sourceMappingURL=chunk-34TL62DK.js.map
